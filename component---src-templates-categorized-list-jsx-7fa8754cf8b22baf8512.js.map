{"version":3,"sources":["webpack:///./src/components/CategorizedList/index.jsx","webpack:///./src/templates/CategorizedList.jsx"],"names":["CategorizedList_CategorizedList","_ref","data","location","page","Object","getPage","a","category","fp","flow","get","split","allPosts","getPosts","filter","isEqual","postCount","size","posts","slice","constants","CONTENT_PER_PAGE","react_default","createElement","react","Fragment","PostsWrapper","Helmet_default","toUpper","name","content","isEmpty","map","post","node","path","frontmatter","images","tags","Card","assign","key","Pagination","prefix","propTypes","prop_types_default","shape","isRequired","components_CategorizedList","f","d","t","default","props","layout","pageQuery"],"mappings":"yOAWMA,EAAkB,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,SACzBC,EAAOC,OAAAC,EAAAC,EAAAF,CAAQ,EAARA,CAAWF,GAClBK,EAAWH,OAAAI,EAAAC,KAAAL,CACfA,OAAAI,EAAAE,IAAAN,CAAI,YACJA,OAAAI,EAAAG,MAAAP,CAAM,KACNA,OAAAI,EAAAE,IAAAN,CAAI,KAHWA,CAIfF,GACIU,EAAWR,OAAAI,EAAAC,KAAAL,CACfS,EAAAP,EACAF,OAAAI,EAAAM,OAAAV,CACEA,OAAAI,EAAAC,KAAAL,CACEA,OAAAI,EAAAE,IAAAN,CAAI,6BACJA,OAAAI,EAAAO,QAAAX,CAAQG,KALGH,CAQfH,GACIe,EAAYZ,OAAAI,EAAAS,KAAAb,CAAKQ,GACjBM,EAAQd,OAAAI,EAAAW,MAAAf,EACXD,EAAO,GAAKiB,EAAAC,iBACblB,EAAOiB,EAAAC,iBAFKjB,CAGZQ,GAEF,OACEU,EAAAhB,EAAAiB,cAACC,EAAAC,SAAD,KACEH,EAAAhB,EAAAiB,cAACG,EAAApB,EAAD,KACEgB,EAAAhB,EAAAiB,cAACI,EAAArB,EAAD,KACEgB,EAAAhB,EAAAiB,cAAA,yBACenB,OAAAI,EAAAoB,QAAAxB,CAAQG,IAEvBe,EAAAhB,EAAAiB,cAAA,QAAMM,KAAK,WAAWC,QAAA,YAAqB1B,OAAAI,EAAAoB,QAAAxB,CAAQG,MAEpDH,OAAAI,EAAAuB,QAAA3B,CAAQc,GACPI,EAAAhB,EAAAiB,cAAA,+BAGE,KACHnB,OAAAI,EAAAwB,IAAA5B,CAAI,SAAC6B,GACJ,GAAuB,UAAnBA,EAAKC,KAAKC,KAAkB,CAC9B,IAAMC,EAAchC,OAAAI,EAAAE,IAAAN,CAAI,mBAAJA,CAAwB6B,GACpCI,EAAuBD,EAAvBC,OAAQC,EAAeF,EAAfE,KAAMH,EAASC,EAATD,KAEtB,OACEb,EAAAhB,EAAAiB,cAACgB,EAAAjC,EAADF,OAAAoC,QAAMC,IAAKN,EAAMA,KAAMA,EAAME,OAAQA,EAAQC,KAAMA,GAAUF,IAIjE,OAAO,MAVRhC,CAWEc,IAELI,EAAAhB,EAAAiB,cAACmB,EAAApC,GACCqC,OAAA,eAAuBpC,EAAvB,IACAS,UAAWA,EACXd,SAAUA,MAMlBH,EAAgB6C,WACd3C,KAAM4C,EAAAvC,EAAUwC,UAAUC,WAC1B7C,SAAU2C,EAAAvC,EAAUwC,UAAUC,YAGhC,IAAAC,EAAAC,EAAA3C,EAAA4C,EAAAC,EAAA,8BAAAD,IAAAC,EAAAC,QCrEgC,SAAAC,GAAA,OAC9B/B,EAAAhB,EAAAiB,cAAC+B,EAAAhD,EAAW+C,EACV/B,EAAAhB,EAAAiB,cAACyB,EAAoBK,KAFzB,IAQaE","file":"component---src-templates-categorized-list-jsx-7fa8754cf8b22baf8512.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { flow, isEmpty, isEqual, slice, split, filter, map, get, size, toUpper } from 'lodash/fp';\nimport PostsWrapper from '~/components/Common/PostsWrapper';\nimport Card from '~/components/Common/Card';\nimport Pagination from '~/components/Common/Pagination';\nimport getPosts from '~/utils/getPosts';\nimport getPage from '~/utils/getPage';\nimport { CONTENT_PER_PAGE } from '~/constants';\n\nconst CategorizedList = ({ data, location }) => {\n  const page = getPage(3)(location);\n  const category = flow(\n    get('pathname'),\n    split('/'),\n    get('2')\n  )(location);\n  const allPosts = flow(\n    getPosts,\n    filter(\n      flow(\n        get('node.frontmatter.category'),\n        isEqual(category)\n      )\n    )\n  )(data);\n  const postCount = size(allPosts);\n  const posts = slice(\n    (page - 1) * CONTENT_PER_PAGE,\n    page * CONTENT_PER_PAGE\n  )(allPosts);\n\n  return (\n    <Fragment>\n      <PostsWrapper>\n        <Helmet>\n          <title>\n            {`WONISM | ${toUpper(category)}`}\n          </title>\n          <meta name=\"og:title\" content={`WONISM | ${toUpper(category)}`} />\n        </Helmet>\n        {isEmpty(posts) ? (\n          <div>\n            Posts Not Found.\n          </div>\n        ) : null}\n        {map((post) => {\n          if (post.node.path !== '/404/') {\n            const frontmatter = get('node.frontmatter')(post);\n            const { images, tags, path } = frontmatter;\n\n            return (\n              <Card key={path} path={path} images={images} tags={tags} {...frontmatter} />\n            );\n          }\n\n          return null;\n        })(posts)}\n      </PostsWrapper>\n      <Pagination\n        prefix={`/categories/${category}/`}\n        postCount={postCount}\n        location={location}\n      />\n    </Fragment>\n  );\n};\n\nCategorizedList.propTypes = {\n  data: PropTypes.shape({}).isRequired,\n  location: PropTypes.shape({}).isRequired,\n};\n\nexport default CategorizedList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '~/components/layout';\nimport CategorizedList from '~/components/CategorizedList';\n\nconst CategorizedListTemplate = props => (\n  <Layout {...props}>\n    <CategorizedList {...props} />\n  </Layout>\n);\n\nexport default CategorizedListTemplate;\n\nexport const pageQuery = graphql`\n  query CategorizedListQuery {\n    allMarkdownRemark (\n      filter: { frontmatter: { hide: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            type\n            title\n            category\n            images\n            path\n            tags\n            date\n            summary\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}